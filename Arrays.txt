#include <iostream>
#include <climits>
using namespace std;

int getMin(int arr[], int size) {
    int min = INT_MAX;
    for (int i = 0; i < size; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

int getMAx(int arr[],int size){
    int max = INT_MIN;
 for(int i = 0; i < size; i++){
    if (arr[i] > max) {
            max = arr[i];
        }
}

return max;
}


int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    int num[size];

    // Input values into the array
    cout << "Enter " << size << " integers:\n";
    for (int i = 0; i < size; i++) {
        cin >> num[i];
    }

    cout << "Entered array elements: ";
    for (int i = 0; i < size; i++) {
        cout << num[i] << " ";
    }

    cout << "\nMinimum value in the array: " << getMin(num, size);
    cout << "\nMinimum value in the array: " << getMAx(num, size);

    return 0;
}


#include <iostream>
#include <climits>
using namespace std;

int getMin(int arr[], int size) {
    int min = INT_MAX;
    for (int i = 0; i < size; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

int getMAx(int arr[],int size){
    int max = INT_MIN;
 for(int i = 0; i < size; i++){
    if (arr[i] > max) {
            max = arr[i];
        }
}

return max;
}


int main() {
    int num[] = {4,3,55,2,33,23};
    int size = sizeof(num)/sizeof(num[0]);

   
    cout << "\nMinimum value in the array: " << getMin(num, size);
    cout << "\nMinimum value in the array: " << getMAx(num, size);

    return 0;
}


2) Sum of all  Elements in array

#include <iostream>
using namespace std;

int addition(int arr[],int size){ 
  int totalCount = 0;
  for(int i=0;i<size;i++){
     totalCount += arr[i];
  }
  return totalCount;
}

int main(){
    int arr[] = {3,3,3,3,3};
    int size = sizeof(arr) / sizeof(arr[0]);
     cout << addition(arr,size);
    return 0;
}


3) Liner Search
#include <iostream>
using namespace std;

int linearSearch(int arr[],int size,int key){
 for(int i=0;i<size;i++){
   if(arr[i]==key){
     return 1;
   }
 }
 return 0;
}

int main(){
    int arr[] = {4,3453,3534,-345,345,3453,40484,4234};
    int key = 4;
    int size = sizeof(arr) /sizeof(arr[0]);

    cout << linearSearch(arr,size,key);
    return 0;

}


4)Binary Search (Reverse Array);

#include <iostream>
using namespace std;

int reverseArry(int arr[],int size){
  int start = 0;
  int end = size - 1;

  while(start<=end){
    swap(arr[start],arr[end]);
    start++;
    end--;
  }
}

int main(){
    int arr[] = {5,34,5,444,54};
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << reverseArry(arr,size);
}


5)Swap Array
#include <iostream>
using namespace std;

int reverseArry(int arr[],int size){
  int start = 0;
  int end = size - 1;

  while(start<=end){
    swap(arr[start],arr[end]);
    start++;
    end--;
  }
}

int main(){
    int arr[] = {5,34,5,444,54};
    int size = sizeof(arr) / sizeof(arr[0]);
    int array = reverseArry(arr,size);
    
    for(int i=0;i<=size;i++){
        cout << arr[i] << '\n';
    }
    return 0;
}

//Find Unique
//find duplicate
//array intersection
//pair Sum
//triplate Sum
//Sort 0 and 1s
//Swap Altranate


Swap Altranate

#include <iostream>
using namespace std;

int swapNum(int arr[],int size){
  for(int i=0;i<size;i+=2){
      if(i+1 < size){
        swap(arr[i],arr[i+1]);
      }
  }
}

int main(){
    int arr[] = {3,32,56,23,52};
    int size = sizeof(arr)/sizeof(arr[0]);

    swapNum(arr,size);
    return 0;
}


//without swap function
#include <iostream>
using namespace std;

int swapNum(int arr[],int size){
  for(int i=0;i<size;i+=2){
      if(i+1 < size){
         int temp = arr[i];
         arr[i] = arr[i+1];
         arr[i+1] = temp;
      }
  }
}

int main(){
    int arr[] = {3,32,56,23,52};
    int size = sizeof(arr)/sizeof(arr[0]);

    swapNum(arr,size);
    
    for(int i=0;i<size;i++){
        cout << arr[i] << "\n";
    }
    return 0;
}


//Find Unique
n = 2n+1 => That means unique number
//XOR same number return 0

#include <iostream>
using namespace std;

int findUnique(int arr[],int size){
  int ans = 0;
  for(int i=0;i<size;i++){
      ans = ans^arr[i];
  }
  
  return ans;
}

int main(){
    int arr[] = {3,3,4,4,5};
    int size = sizeof(arr)/sizeof(arr[0]);

   cout << findUnique(arr,size);
    return 0;
}


#include <iostream>
using namespace std;

int findUnique(int arr[],int size){
  int checkUnique = true;
  for(int i=0;i<size;i++){
      for(int j =0;j<size;j++){
          if(i!=j && arr[i] == arr[j]){
              checkUnique = false;
              break;
          }
      }
      
     if (checkUnique) {
        std::cout << arr[i] << "\n";
    }
  }
}

int main(){
    int arr[] = {3,3,4,4,5};
    int size = sizeof(arr)/sizeof(arr[0]);

   cout << findUnique(arr,size);
    return 0;
}


#number of occurence is unique return true

#include <iostream>

class Solution {
public:
    bool uniqueOccurrences(int arr[], int size) {
        const int maxVal = 2001;  

        int occurrenceCount[maxVal] = {0};
        bool uniqueCounts[maxVal] = {false};

        
        for (int i = 0; i < size; ++i) {
            occurrenceCount[arr[i] + 1000]++;
        }

        for (int i = 0; i < maxVal; ++i) {
            if (occurrenceCount[i] > 0) {
                if (uniqueCounts[occurrenceCount[i]]) {
                    return false; // Not unique
                } else {
                    uniqueCounts[occurrenceCount[i]] = true;
                }
            }
        }

        return true;
    }
};

int main() {
    Solution solution;

    // Example 1
    int arr1[] = {1, 2, 2, 1, 1, 3};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    std::cout << "Example 1: " << (solution.uniqueOccurrences(arr1, size1) ? "true" : "false") << "\n";

    // Example 2
    int arr2[] = {1, 2};
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    std::cout << "Example 2: " << (solution.uniqueOccurrences(arr2, size2) ? "true" : "false") << "\n";

    // Example 3
    int arr3[] = {1, -3, 0, 1, -3, 1, 1, 1, -3, 10, 0};
    int size3 = sizeof(arr3) / sizeof(arr3[0]);
    std::cout << "Example 3: " << (solution.uniqueOccurrences(arr3, size3) ? "true" : "false") << "\n";

    return 0;
}
