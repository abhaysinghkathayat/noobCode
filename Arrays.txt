#include <iostream>
#include <climits>
using namespace std;

int getMin(int arr[], int size) {
    int min = INT_MAX;
    for (int i = 0; i < size; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

int getMAx(int arr[],int size){
    int max = INT_MIN;
 for(int i = 0; i < size; i++){
    if (arr[i] > max) {
            max = arr[i];
        }
}

return max;
}


int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    int num[size];

    // Input values into the array
    cout << "Enter " << size << " integers:\n";
    for (int i = 0; i < size; i++) {
        cin >> num[i];
    }

    cout << "Entered array elements: ";
    for (int i = 0; i < size; i++) {
        cout << num[i] << " ";
    }

    cout << "\nMinimum value in the array: " << getMin(num, size);
    cout << "\nMinimum value in the array: " << getMAx(num, size);

    return 0;
}


#include <iostream>
#include <climits>
using namespace std;

int getMin(int arr[], int size) {
    int min = INT_MAX;
    for (int i = 0; i < size; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

int getMAx(int arr[],int size){
    int max = INT_MIN;
 for(int i = 0; i < size; i++){
    if (arr[i] > max) {
            max = arr[i];
        }
}

return max;
}


int main() {
    int num[] = {4,3,55,2,33,23};
    int size = sizeof(num)/sizeof(num[0]);

   
    cout << "\nMinimum value in the array: " << getMin(num, size);
    cout << "\nMinimum value in the array: " << getMAx(num, size);

    return 0;
}


2) Sum of all  Elements in array

#include <iostream>
using namespace std;

int addition(int arr[],int size){ 
  int totalCount = 0;
  for(int i=0;i<size;i++){
     totalCount += arr[i];
  }
  return totalCount;
}

int main(){
    int arr[] = {3,3,3,3,3};
    int size = sizeof(arr) / sizeof(arr[0]);
     cout << addition(arr,size);
    return 0;
}


3) Liner Search
#include <iostream>
using namespace std;

int linearSearch(int arr[],int size,int key){
 for(int i=0;i<size;i++){
   if(arr[i]==key){
     return 1;
   }
 }
 return 0;
}

int main(){
    int arr[] = {4,3453,3534,-345,345,3453,40484,4234};
    int key = 4;
    int size = sizeof(arr) /sizeof(arr[0]);

    cout << linearSearch(arr,size,key);
    return 0;

}


4)Binary Search (Reverse Array);

#include <iostream>
using namespace std;

int reverseArry(int arr[],int size){
  int start = 0;
  int end = size - 1;

  while(start<=end){
    swap(arr[start],arr[end]);
    start++;
    end--;
  }
}

int main(){
    int arr[] = {5,34,5,444,54};
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << reverseArry(arr,size);
}


5)Swap Array
#include <iostream>
using namespace std;

int reverseArry(int arr[],int size){
  int start = 0;
  int end = size - 1;

  while(start<=end){
    swap(arr[start],arr[end]);
    start++;
    end--;
  }
}

int main(){
    int arr[] = {5,34,5,444,54};
    int size = sizeof(arr) / sizeof(arr[0]);
    int array = reverseArry(arr,size);
    
    for(int i=0;i<=size;i++){
        cout << arr[i] << '\n';
    }
    return 0;
}

//Find Unique
//find duplicate
//array intersection
//pair Sum
//triplate Sum
//Sort 0 and 1s
//Swap Altranate


Swap Altranate

#include <iostream>
using namespace std;

int swapNum(int arr[],int size){
  for(int i=0;i<size;i+=2){
      if(i+1 < size){
        swap(arr[i],arr[i+1]);
      }
  }
}

int main(){
    int arr[] = {3,32,56,23,52};
    int size = sizeof(arr)/sizeof(arr[0]);

    swapNum(arr,size);
    return 0;
}


//without swap function
#include <iostream>
using namespace std;

int swapNum(int arr[],int size){
  for(int i=0;i<size;i+=2){
      if(i+1 < size){
         int temp = arr[i];
         arr[i] = arr[i+1];
         arr[i+1] = temp;
      }
  }
}

int main(){
    int arr[] = {3,32,56,23,52};
    int size = sizeof(arr)/sizeof(arr[0]);

    swapNum(arr,size);
    
    for(int i=0;i<size;i++){
        cout << arr[i] << "\n";
    }
    return 0;
}


//Find Unique
n = 2n+1 => That means unique number
//XOR same number return 0

#include <iostream>
using namespace std;

int findUnique(int arr[],int size){
  int ans = 0;
  for(int i=0;i<size;i++){
      ans = ans^arr[i];
  }
  
  return ans;
}

int main(){
    int arr[] = {3,3,4,4,5};
    int size = sizeof(arr)/sizeof(arr[0]);

   cout << findUnique(arr,size);
    return 0;
}


#include <iostream>
using namespace std;

int findUnique(int arr[],int size){
  int checkUnique = true;
  for(int i=0;i<size;i++){
      for(int j =0;j<size;j++){
          if(i!=j && arr[i] == arr[j]){
              checkUnique = false;
              break;
          }
      }
      
     if (checkUnique) {
        std::cout << arr[i] << "\n";
    }
  }
}

int main(){
    int arr[] = {3,3,4,4,5};
    int size = sizeof(arr)/sizeof(arr[0]);

   cout << findUnique(arr,size);
    return 0;
}


#number of occurence is unique return true

#include <iostream>

class Solution {
public:
    bool uniqueOccurrences(int arr[], int size) {
        const int maxVal = 2001;  

        int occurrenceCount[maxVal] = {0};
        bool uniqueCounts[maxVal] = {false};

        
        for (int i = 0; i < size; ++i) {
            occurrenceCount[arr[i] + 1000]++;
        }

        for (int i = 0; i < maxVal; ++i) {
            if (occurrenceCount[i] > 0) {
                if (uniqueCounts[occurrenceCount[i]]) {
                    return false; // Not unique
                } else {
                    uniqueCounts[occurrenceCount[i]] = true;
                }
            }
        }

        return true;
    }
};

int main() {
    Solution solution;

    // Example 1
    int arr1[] = {1, 2, 2, 1, 1, 3};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    std::cout << "Example 1: " << (solution.uniqueOccurrences(arr1, size1) ? "true" : "false") << "\n";

    // Example 2
    int arr2[] = {1, 2};
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    std::cout << "Example 2: " << (solution.uniqueOccurrences(arr2, size2) ? "true" : "false") << "\n";

    // Example 3
    int arr3[] = {1, -3, 0, 1, -3, 1, 1, 1, -3, 10, 0};
    int size3 = sizeof(arr3) / sizeof(arr3[0]);
    std::cout << "Example 3: " << (solution.uniqueOccurrences(arr3, size3) ? "true" : "false") << "\n";

    return 0;
}


//duplicate in Array

#include <iostream>
using namespace std;

int findDuplicates(int arr[],int size){
   int answer = 0;

 //XOR All elements
   for(int i=0;i<size;i++){
     answer = answer^arr[i];
   }

//XOR n-1 elements
   for(int i=1;i< size;i++){
    answer = answer^i;
   }

   return answer;
}

int main(){
    int arr[] = {1,2,2,3,4};
    int size = sizeof(arr) / sizeof(arr[0]);

    int ans = findDuplicates(arr,size);
    cout << ans;

    return 0;
}


//Find all duplicates in array

#include <iostream>
using namespace std;

int findDuplicates(int arr[],int size){
   for(int i=0;i<size;i++){
     for(int j=i+1;j<size;j++){
         if(arr[i]==arr[j]){
             cout << arr[i] << " ";
             break;
         }
     }
   }
}

int main(){
    int arr[] = {1,2,2,3,4,3};
    int size = sizeof(arr) / sizeof(arr[0]);

    int ans = findDuplicates(arr,size);
    return 0;
}


#include <iostream>
using namespace std;

void findDuplicates(int arr[], int size) {
    const int MAX_VALUE = 1000; 

    int count[MAX_VALUE] = {0};
    for (int i = 0; i < size; i++) {
        count[arr[i]]++;
    }

    for (int i = 0; i < MAX_VALUE; i++) {
        if (count[i] > 1) {
            cout << i << " ";
        }
    }
}

int main() {
    int arr[] = {1, 2, 2, 3, 3, 4};
    int size = sizeof(arr) / sizeof(arr[0]);

    findDuplicates(arr, size);

    return 0;
}


//intersection of array

#include <iostream>
#include <vector>
using namespace std;

vector<int> findDuplicates(int arr[], int size, int arr2[], int size2) {
    vector<int> duplicates;

    for (int i = 0; i < size; i++) {
        int element = arr[i];

        for (int j = 0; j < size2; j++) {
            if(element < arr[j])
             break;
            if (element == arr2[j]) {
                duplicates.push_back(element);
                arr2[j] = -2123123;
                break;
            }
        }
    }

    return duplicates;
}

int main() {
    int arr[] = {1, 2, 2, 3, 3, 4};
    int arr2[] = {9, 3,2};
    int size = sizeof(arr) / sizeof(arr[0]);
    int size2 = sizeof(arr2) / sizeof(arr2[0]);

    vector<int> ans = findDuplicates(arr, size, arr2, size2);

    cout << "Duplicates: ";
    for (int duplicate : ans) {
        cout << duplicate << " ";
    }

    return 0;
}


#include <iostream>
#include <vector>
using namespace std;

vector<int> findDuplicates(int arr[], int size, int arr2[], int size2) {
    int i = 0;
    int j = 0;
    vector<int> ans;
// jo bhi maximum number hoga loop waha tak chalegi
    while (i < size && j < size2) {
        if (arr[i] == arr2[j]) {
            ans.push_back(arr[i]);
            i++;
            j++;
        } else if (arr[i] < arr2[j]) {
            i++;
        } else {
            j++;
        }

        //else if(arr[i] > arr2[j]) {
          //  j++;
       // }
    }
    return ans;
}

int main() {
    //array always in ascending order
    int arr[] = {1, 2, 2, 3, 3, 4};
    int arr2[] = {2, 3, 9};
    int size = sizeof(arr) / sizeof(arr[0]);
    int size2 = sizeof(arr2) / sizeof(arr2[0]);

    vector<int> ans = findDuplicates(arr, size, arr2, size2);

    for (int duplicate : ans) {
        cout << duplicate << " ";
    }

    return 0;
}

i = 0 , j=0 if(arr[i] < arr2[j]) i++ move to next element
1, 2, 2, 3, 3, 4

0 < 1 then i++


//Pair Sum
#include <iostream>
#include <vector>
#include <algorithm> // for std::min and std::max
using namespace std;

vector<vector<int>> calculatePairSum(const vector<int>& arr, int size, int s) {
    vector<vector<int>> ans;
    
    for(int i = 0; i < size; i++) {
        for(int j = i + 1; j < size; j++) {
            if(arr[i] + arr[j] == s) {
                vector<int> temp;
                temp.push_back(min(arr[i], arr[j]));
                temp.push_back(max(arr[i], arr[j]));
                ans.push_back(temp);
            }
        }
    }
    sort(ans.begin(), ans.end());
    return ans;
}

int main() {
    int arr[] = {1, 2, 4, 5, 6, 4};
    int s = 6;
    int size = sizeof(arr) / sizeof(arr[0]);

    vector<vector<int>> pairsum = calculatePairSum(vector<int>(arr, arr + size), size, s);

    for(int i = 0; i < pairsum.size(); i++) {
        for(int j = 0; j < pairsum[i].size(); j++) {
            cout << pairsum[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


//triplet sum 
#include <iostream>
#include <vector>
#include <algorithm> // for std::min and std::max
using namespace std;

vector<vector<int>> calculatePairSum(const vector<int>& arr, int size, int s) {
    vector<vector<int>> ans;
    
    for(int i = 0; i < size; i++) {
        for(int j = i + 1; j < size; j++) {
            for(int k = j + 1; k < size; k++) {
                if(arr[i] + arr[j] + arr[k] == s) {
                    vector<int> temp = {arr[i], arr[j], arr[k]};
                    sort(temp.begin(), temp.end());
                    ans.push_back(temp);
                }
            }
        }
    }
 
    return ans;
}

int main() {
    vector<int> arr = {1, 2, 4, 3, 6, 4};
    int s = 6;
    int size = arr.size();

    vector<vector<int>> pairsum = calculatePairSum(arr, size, s);

    for(int i = 0; i < pairsum.size(); i++) {
        for(int j = 0; j < pairsum[i].size(); j++) {
            cout << pairsum[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


// 4 time sort
#include <iostream>
#include <vector>
#include <algorithm> // for std::min and std::max
using namespace std;

vector<vector<int>> calculatePairSum(const vector<int>& arr, int size, int s) {
    vector<vector<int>> ans;
    
    for(int i = 0; i < size; i++) {
        for(int j = i + 1; j < size; j++) {
            for(int k = j + 1; k < size; k++) {
                for(int l = k + 1; l < size; l++) {
                    if(arr[i] + arr[j] + arr[k] + arr[l] == s) {
                        vector<int> temp = {arr[i], arr[j], arr[k], arr[l]};
                        sort(temp.begin(), temp.end());
                        ans.push_back(temp);
                    }
                }
            }
        }
    }
    // Sort and remove duplicates
   // sort(ans.begin(), ans.end());
    ans.erase(unique(ans.begin(), ans.end()), ans.end());
 
    return ans;
}

int main() {
    vector<int> arr = {1, 2, 4, 3, 6, 4};
    int s = 10;
    int size = arr.size();

    vector<vector<int>> pairsum = calculatePairSum(arr, size, s);

    for(int i = 0; i < pairsum.size(); i++) {
        for(int j = 0; j < pairsum[i].size(); j++) {
            cout << pairsum[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}



//Sort 0,1
#include <iostream>
#include <algorithm>
using namespace std;

int* sortArr(int arr[], int size) {
    int i = 0;
    int j = size - 1;

    while (i < j) {
        while (arr[i] == 0) {
            i++;
        }
        while (arr[j] == 1) {
            j--; 
        }

        if (i < j) {
            swap(arr[i], arr[j]);
            i++;
            j--;
        }
    }

    return arr;
}

int main() {
    int arr[] = {0, 1, 0, 0, 1, 1, 1, 0};
    int size = sizeof(arr) / sizeof(arr[0]);

    int* arrsort = sortArr(arr, size);

    for (int i = 0; i < size; i++) {
        cout << arrsort[i] << " ";
    }

    return 0;
}


#include <iostream>
#include <algorithm>
using namespace std;

int* sortArr(int arr[], int size) {
    int low = 0;
    int mid = 0;
    int high = size - 1;

    while (mid <= high) {
        switch (arr[mid]) {
            case 0:
                swap(arr[low], arr[mid]);
                low++;
                mid++;
                break;
            case 1:
                mid++;
                break;
            case 2:
                swap(arr[mid], arr[high]);
                high--;
                break;
        }
    }

    return arr;
}

int main() {
    int arr[] = {0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2, 1, 2, 2};
    int size = sizeof(arr) / sizeof(arr[0]);

    int* arrsort = sortArr(arr, size);

    for (int i = 0; i < size; i++) {
        cout << arrsort[i] << " ";
    }

    return 0;
}


